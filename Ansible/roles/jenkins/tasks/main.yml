---
- name: Install service packages
  apt:
    name: ['apt-transport-https', 'openjdk-8-jre', 'git']
    state: present
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Add Jenkins apt key
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins-ci.org.key
    state: present
  when: ansible_os_family == 'Debian'

- name: Add Jenkins apt repository
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian binary/
    state: present
    filename: 'jenkins'
  when: ansible_os_family == 'Debian'

- name: Install Jenkins package
  apt:
    name: "jenkins={{ jenkins_version }}"
    state: present
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Make sure the Jenkins service is stopped
  systemd:
    name: jenkins
    state: stopped

# JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dhudson.DNSMultiCast.disabled=true -Dhudson.udp=-1 -Dhudson.model.DirectoryBrowserSupport.CSP=\"default-src 'self' 'unsafe-inline'; img-src 'self'; style-src 'self' 'unsafe-inline'; child-src 'self'; frame-src 'self';\""
- name: Change Jenkins config (java options)
  lineinfile:
    path: "{{ jenkins_default_config }}"
    regexp: '^JAVA_ARGS='
    line: "JAVA_ARGS=\"-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dhudson.DNSMultiCast.disabled=true -Dhudson.udp=-1 -Dhudson.model.DirectoryBrowserSupport.CSP=\"default-src 'self' 'unsafe-inline'; img-src 'self'; style-src 'self' 'unsafe-inline'; child-src 'self'; frame-src 'self';\"\""
    state: present
    backup: no

- name: Create directory for old Jenkins config
  file:
    path: "{{ jenkins_work_directory }}.old"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Copy current Jenkins config to directory for old config
  copy:
    src: "{{ jenkins_work_directory }}/"
    dest: "{{ jenkins_work_directory }}.old"
    remote_src: yes
    mode: preserve
    force: yes
    backup: no

- name: Find current Jenkins config files
  find:
    path: "{{ jenkins_work_directory }}"
    pattern: '*'
    file_type: any
  register: to_delete

- name: Delete current Jenkins config files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ to_delete.files }}"

- name: Check current Jenkins config files
  find:
    path: "{{ jenkins_work_directory }}"
    pattern: '*'
    file_type: any
  register: check_files

- debug:
    var: check_files.files

- name: Add bitbucket.org ssh key
  copy:
    src: id_rsa.bitbucket.org
    dest: /root/.ssh/id_rsa.bitbucket.org
    owner: root
    group: root
    mode: 0600
    force: yes
    backup: no

- name: Configure ssh to use current key for bitbucket.org
  copy:
    src: ssh_config
    dest: /root/.ssh/config
    owner: root
    group: root
    mode: 0644
    force: yes
    backup: no

- name: Clone git repo with Jenkins config
  git:
    repo: "{{ jenkins_git_repo }}"
    dest: "{{ jenkins_work_directory }}"
    remote: origin
    version: master
    clone: yes
    force: yes
    accept_hostkey: yes
    key_file: /root/.ssh/id_rsa.bitbucket.org

- name: Set owner for Jenkins work directory
  file:
    path: "{{ jenkins_work_directory }}"
    state: directory
    owner: jenkins
    group: jenkins
    recurse: yes

- name: Make sure the Jenkins service is enabled and running
  systemd:
    name: jenkins
    state: started
    enabled: yes
  register: do_service

- name: Wait until the Jenkins service is ready
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ jenkins_port }}"
    delay: 30
    timeout: 120
  when: do_service.changed