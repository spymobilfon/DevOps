---
- name: Configure global settings.
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = {{ item.value }}"
    state: "{{ item.state | default('present') }}"
    backup: yes
  with_items: "{{ postgresql_global_config_options }}"
  notify: restart postgresql

- name: Configure host based authentication.
  lineinfile:
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    insertafter: EOF
    line: "{{ item.line }}"
    state: "{{ item.state | default('present') }}"
    backup: yes
  with_items: "{{ postgresql_hba_entries }}"
  notify: restart postgresql

- name: Wait until the PostgreSQL service is ready.
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ postgresql_port }}"
    delay: 30
    timeout: 120

- name: Restart PostgreSQL.
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted

# Configure slave
- name: Stop slave PostgreSQL.
  service:
    name: "{{ postgresql_daemon }}"
    state: stopped
  when: role == 'slave'

- name: Clear data directory on slave PostgreSQL.
  file:
    path: "{{ postgresql_data_dir }}"
    state: absent
  when: role == 'slave'

- name: Create empty data directory on slave PostgreSQL.
  file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0700
  when: role == 'slave'

- name: Create base backup from master to slave PostgreSQL.
  shell: PGPASSWORD={{ postgresql_replica_password }} /usr/bin/pg_basebackup -X stream -c fast -h {{ master_address[0] }} -U {{ postgresql_replica_user }} -D {{ postgresql_data_dir }}
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ postgresql_user }}"
  when: role == 'slave'

- name: Create recovery.conf on slave PostgreSQL.
  template:
    src: recovery.conf.j2
    dest: "{{ postgresql_config_path }}/recovery.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0644
  when: role == 'slave'

- name: Start slave PostgreSQL.
  service:
    name: "{{ postgresql_daemon }}"
    state: started
  when: role == 'slave'